{"version":3,"sources":["Hooks/interval.ts","Timer/index.tsx","App.tsx","index.tsx"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Timer","useState","time","setTime","isActive","setIsActive","mode","setMode","sessionTime","setSessionTime","breakTime","setBreakTime","maxTime","setMaxTime","play","pause","className","moment","format","onClick","value","maxValue","minValue","text","strokeWidth","styles","buildStyles","trailColor","pathColor","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MA4BeA,EAzBK,SAACC,EAAcC,GAEjC,IAAMC,EAAgBC,mBAEtBC,qBACI,WACIF,EAAcG,QAAUL,IAE5B,CAACA,IAGLI,qBACI,WAGI,GAAc,IAAVH,EAAa,CACb,IAAMK,EAAKC,aAHC,kBAAiBL,EAAcG,QAAd,MAAAH,EAAa,aAGVD,GAChC,OAAM,kBAAMO,cAAcF,OAIlC,CAACL,K,qCCfQ,SAASQ,IAAS,IAAD,EACNC,mBAAiB,GADX,mBACvBC,EADuB,KACjBC,EADiB,OAEEF,oBAAkB,GAFpB,mBAEvBG,EAFuB,KAEbC,EAFa,OAGNJ,mBAAiB,SAHX,mBAGvBK,EAHuB,KAGjBC,EAHiB,OAIQN,mBAAiB,IAJzB,mBAIvBO,EAJuB,KAIVC,EAJU,OAKIR,mBAAiB,GALrB,mBAKvBS,EALuB,KAKZC,EALY,OAMAV,mBAAiB,GANjB,mBAMvBW,EANuB,KAMdC,EANc,KAQ9BvB,GAAY,kBAAMa,EAAQD,EAAO,OAAOE,EAAW,IAAM,GAEzDT,qBAAU,WACRQ,EAAoB,GAAZK,EAAe,OACvB,CAACA,IAEHb,qBAAU,WACI,IAARO,IACU,YAATI,GACDC,EAAQ,SACRJ,EAAkB,GAAVO,EAAa,KACrBG,EAAqB,GAAVH,EAAa,MACN,UAATJ,IACTC,EAAQ,WACRJ,EAAoB,GAAZK,EAAe,KACvBK,EAAuB,GAAZL,EAAe,SAG9B,CAACN,EAAMI,EAAME,EAAaE,EAAUE,IAEtC,IAWIE,EAAO,mCACPC,EAAQ,oCAEZ,OACE,yBAAKC,UAAU,SACb,wBAAIA,UAAU,SAAd,kBACA,wBAAIA,UAAU,SAASC,IAAOf,GAAMgB,OAAO,UAE3C,4BAAQrB,GAAG,aAAasB,QAAS,WAAMd,GAAaD,KACjDA,EAAUW,EAAOD,GAEpB,4BAAQjB,GAAG,QAAQsB,QAAS,WApB9Bd,GAAY,GACZE,EAAQ,WACRI,EAAa,GACbF,EAAe,IACfN,EAAQ,QAgBN,SAEA,kBAAC,IAAD,CACEiB,MAAOR,EAAQV,EACfmB,SAAUT,EACVU,SAAU,EACVC,KAAM,GACNC,YAAa,EACbC,OAAQC,YAAY,CAClBC,WAAY,OACZC,UAAW,sB,MCtDNC,MATf,WAEE,OAEE,kBAAC,EAAD,OCLJC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f7da161d.chunk.js","sourcesContent":["import {useEffect, useRef} from 'react';\n\n\nconst useInterval = (callback:any, delay:number) => {\n\n  const savedCallback = useRef<any|undefined>();\n\n  useEffect(\n      () => {\n          savedCallback.current = callback;\n      },\n      [callback]\n  );\n\n  useEffect(\n      () => {\n          const handler = (...args:any) => savedCallback.current(...args );\n\n          if (delay !== 0) {\n              const id = setInterval(handler, delay);\n              return() => clearInterval(id);\n          }\n        \n      },\n      [delay]\n  );\n}\n\nexport default useInterval;","import React, { useState, useEffect } from 'react';\nimport useInterval from '../Hooks/interval';\n\nimport { CircularProgressbar, buildStyles } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport moment from 'moment'\nimport './index.css';\n\n\nexport default function Timer() {\n  const [time, setTime] = useState<number>(0);\n  const [isActive, setIsActive] = useState<boolean>(false);\n  const [mode, setMode] = useState<string>('break');\n  const [sessionTime, setSessionTime] = useState<number>(25);\n  const [breakTime, setBreakTime] = useState<number>(5);\n  const [maxTime, setMaxTime] = useState<number>(0);\n\n  useInterval(() => setTime(time - 1000), isActive ? 1000: 0);\n  \n  useEffect(() => {\n    setTime(sessionTime*60*1000);\n  },[sessionTime]);\n\n  useEffect(() =>{\n    if (time ===0) {\n      if(mode === 'session'){\n        setMode('break');\n        setTime(breakTime*60*1000);\n        setMaxTime(breakTime*60*1000);\n      } else if (mode === 'break'){\n        setMode('session');\n        setTime(sessionTime*60*1000);\n        setMaxTime(sessionTime*60*1000);\n      }\n    }\n  },[time, mode, sessionTime, breakTime,maxTime]);\n\n  const handleReset = () => {\n    \n    setIsActive(false)\n    setMode('session')\n    setBreakTime(5)\n    setSessionTime(25)\n    setTime(25 * 60 * 1000)\n  }\n\n  \n\nconst play = <p>Play</p>;\nconst pause = <p>Pause</p>;\n\n  return (\n    <div className=\"Timer\">\n      <h2 className=\"Title\">Pomodoro Timer</h2>\n      <h2 className=\"Clock\">{moment(time).format('mm:ss')}</h2>\n\n      <button id=\"play-pause\" onClick={() =>{setIsActive(!isActive)}}>\n        {isActive? pause: play}\n      </button>\n      <button id=\"reset\" onClick={() =>{handleReset()}}>Reset</button>\n     \n      <CircularProgressbar \n        value={maxTime-time} \n        maxValue={maxTime} \n        minValue={1}\n        text={''} \n        strokeWidth={2} \n        styles={buildStyles({\n          trailColor: 'grey',\n          pathColor: 'rgb(0,255,255)'\n        })}\n      />\n      \n    </div>\n  );\n}\n","import React from 'react';\nimport Timer from './Timer/'\n\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n\n    <Timer/>\n    //adicionar possivelmente um to-do list\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}